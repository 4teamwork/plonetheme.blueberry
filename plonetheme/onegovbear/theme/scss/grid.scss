$column-width: 56px;
$gutter-width: 18px;
$margin-width: 18px;
$columns: 16;

$gridsystem-width: $columns * $column-width + ($columns - 1) * $gutter-width + 2 * $margin-width;

@for $x from 1 through $columns {
  div.width-#{$x} {
    width: 100% * (($column-width + $gutter-width) * $x - $gutter-width) / $gridsystem-width;
  }
}

@for $x from 0 through $columns - 1 {
  div.position-#{$x} {
    margin-left: 100% * (($column-width + $gutter-width) * $x - $gridsystem-width + $margin-width) / $gridsystem-width;
  }
}

@mixin gridwidth($x) {
  width: 100% * (($column-width + $gutter-width) * $x - $gutter-width) / $gridsystem-width;
}

@mixin gridposition($x) {
  margin-left: 100% * (($column-width + $gutter-width) * $x - $gridsystem-width + $margin-width) / $gridsystem-width;
}

div.row {
  float: left;
  width: 100%;
  display: block;
  position: relative;

  @include print {
    float: none;
    position: static;
  }
}

@mixin cell {
  position: relative;
  float: left;
  left: 100%;
  clear: none;

  @include print {
    float: none;
    position: static;
    left: 0;
    margin: 0 !important;
  }
}

div.cell {
  @include cell();
}

// For nested grids - subtract the margin to get the new grid width
#column-content {
  @for $x from 1 through 16 {
    div.width-#{$x} {
      width: 100% * (($column-width + $gutter-width) * $x - $gutter-width) / ($gridsystem-width - $margin-width * 2);
    }
  }

  @for $x from 0 through 15 {
    div.position-#{$x} {
      margin-left: 100% * ($column-width + $gutter-width) * $x / ($gridsystem-width - $margin-width * 2) - 100%;
    }
  }
}
